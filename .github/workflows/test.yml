name: Test

on:
  push:
  pull_request:

jobs:
  test-mingw:
    runs-on: windows-latest
    name: Test mingw-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64, rust_target: x86_64-pc-windows-gnu },
          # { msystem: MINGW32, arch: i686, rust_target: i686-pc-windows-gnu }
        ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4

      - name: Install msys2 and dependencies
        uses: msys2/setup-msys2@v2
        with:
          update: true
          path-type: inherit
          msystem: ${{ matrix.msystem }}
          install: >-
            python-devel
            mingw-w64-${{ matrix.arch }}-toolchain
            mingw-w64-${{ matrix.arch }}-python
            mingw-w64-${{ matrix.arch }}-python-pip
            mingw-w64-${{ matrix.arch }}-python-poetry
            mingw-w64-${{ matrix.arch }}-cython
            mingw-w64-${{ matrix.arch }}-cmake

      - name: Install Rustup using win.rustup.rs
        run: |
          curl -o rustup-init.exe -sSL https://win.rustup.rs/
          ./rustup-init.exe -y --default-host=${{ matrix.rust_target }} --profile=minimal
          rm rustup-init.exe

      - name: Install Rust
        run: |
          rustup install stable --profile minimal
          rustup default stable
          rustup target add ${{ matrix.rust_target }}      

      - name: Create libpython symlink
        run: ln -s /mingw64/lib/libpython3.11.dll.a /mingw64/lib/libpython311.dll.a

      - name: Install Poetry
        run: |
          export SETUPTOOLS_USE_DISTUTILS=stdlib
          # pip install --upgrade poetry --no-binary :all:
          poetry install

      - name: Run
        run: poetry run python python/hello_world/main.py